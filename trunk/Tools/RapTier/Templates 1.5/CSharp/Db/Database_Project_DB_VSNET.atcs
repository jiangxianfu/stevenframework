<#--
		RapTier multi-tier Code Generator http://www.SharpPower.com
		Copyright (c) 2002-2004 SharpPower. All rights reserved.
--##>
<VisualStudioProject>
    <CSHARP
        ProjectType = "Local"
        ProductVersion = "<#= ProductVersion #>"
        SchemaVersion = "<#= ShemaVersion #>"
        ProjectGuid = "<#= GetDbProjectId() #>"
    >
        <Build>
            <Settings
                ApplicationIcon = ""
                AssemblyKeyContainerName = ""
                AssemblyName = "<#= SharedUtils.GetBaseDbTierNamespace(Database) #>"
                AssemblyOriginatorKeyFile = ""
                DefaultClientScript = "JScript"
                DefaultHTMLPageLayout = "Grid"
                DefaultTargetSchema = "IE50"
                DelaySign = "false"
                OutputType = "Library"
<#				if(IsVS2003OrLater)
				{ ##>
                PreBuildEvent = ""
                PostBuildEvent = ""
                RunPostBuildEvent = "OnBuildSuccess"
<#				} ##>
                RootNamespace = "<#= SharedUtils.GetBaseDbTierNamespace(Database) #>"
                StartupObject = ""
			>
                <Config
                    Name = "Debug"
                    AllowUnsafeBlocks = "false"
                    BaseAddress = "285212672"
                    CheckForOverflowUnderflow = "false"
                    ConfigurationOverrideFile = ""
                    DefineConstants = "DEBUG;TRACE"
                    DocumentationFile = ""
                    DebugSymbols = "true"
                    FileAlignment = "4096"
                    IncrementalBuild = "true"
<#					if(IsVS2003OrLater)
					{ ##>
                    NoStdLib = "false"
                    NoWarn = ""
<#					} ##>
                    Optimize = "false"
                    OutputPath = "bin\Debug\"
                    RegisterForComInterop = "false"
                    RemoveIntegerChecks = "false"
                    TreatWarningsAsErrors = "false"
                    WarningLevel = "4"
                />
                <Config
                    Name = "Release"
                    AllowUnsafeBlocks = "false"
                    BaseAddress = "285212672"
                    CheckForOverflowUnderflow = "false"
                    ConfigurationOverrideFile = ""
                    DefineConstants = "TRACE"
                    DocumentationFile = ""
                    DebugSymbols = "false"
                    FileAlignment = "4096"
                    IncrementalBuild = "false"
<#					if(IsVS2003OrLater)
					{ ##>
                    NoStdLib = "false"
                    NoWarn = ""
<#					} ##>
                    Optimize = "true"
                    OutputPath = "bin\Release\"
                    RegisterForComInterop = "false"
                    RemoveIntegerChecks = "false"
                    TreatWarningsAsErrors = "false"
                    WarningLevel = "4"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                    HintPath = "<#= GetSystemHintPath("System.dll") #>"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                    HintPath = "<#= GetSystemHintPath("System.Data.dll") #>"
                />
                <Reference
                    Name = "System.Xml"
                    AssemblyName = "System.Xml"
                    HintPath = "<#= GetSystemHintPath("System.Xml.dll") #>"
                />
            </References>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "AssemblyInfo.cs"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
                <File
                    RelPath = "<#= SharedUtils.GetBaseClassRelativePath(Database.CodeName + "_Base.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
                <File
                    RelPath = "<#= SharedUtils.GetUserClassRelativePath(Database.CodeName + ".cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
<#
	foreach(ITable table in Database.Tables)
	{ ##>
                <File
                    RelPath = "<#= SharedUtils.GetBaseClassRelativePath(table.CodeName + "Row_Base.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
                <File
                    RelPath = "<#= SharedUtils.GetUserClassRelativePath(table.CodeName + "Row.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
                <File
                    RelPath = "<#= SharedUtils.GetBaseClassRelativePath(SharedUtils.GetGatewayClassName(table) + "_Base.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
                <File
                    RelPath = "<#= SharedUtils.GetUserClassRelativePath(SharedUtils.GetGatewayClassName(table) + ".cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
<#	} ##>
<#	if(SharedUtils.GenerateStoredProcedureWrapper(Database))
	{ ##>
				<File
                    RelPath = "<#= SharedUtils.GetBaseClassRelativePath("StoredProcedures_Base.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
				<File
                    RelPath = "<#= SharedUtils.GetUserClassRelativePath("StoredProcedures.cs") #>"
                    SubType = "Code"
                    BuildAction = "Compile"
                />
<#	} ##>
<#				if(SharedUtils.GetGenerateStoredProcedures(Database))
				{
					if(SharedUtils.IsSQLServerOrSybaseAse(Database))
					{
						string suffix = SharedUtils.IsSQLServer(Database) ? "_MSSQL.sql" : "_SybaseAse.sql";
					  ##>
                <File
                    RelPath = "Sql\<#= Database.CodeName + suffix #>"
                    BuildAction = "Content"
                />
<#					}
					else if(SharedUtils.IsOracle(Database))
					{ ##>
                <File
                    RelPath = "Sql\<#= Database.CodeName #>_PackageBody_Oracle.sql"
                    BuildAction = "Content"
                />
                <File
                    RelPath = "Sql\<#= Database.CodeName #>_PackageDeclaration_Oracle.sql"
                    BuildAction = "Content"
                />
<#					}
				} ##>
            </Include>
        </Files>
    </CSHARP>
</VisualStudioProject>
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.IO;
using System.Text;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private IDatabase Database
	{
		get { return (IDatabase)Environment["Database"]; }
	}

	public override bool Enabled
	{
		get { return TargetIDE.StartsWith("VSNET"); }
	}

	public override bool RewriteExistingFile
	{
		get { return false; }
	}

	public override string RelativeFilePath
	{
		get { return "Db.csproj"; }
	}
	
	private string GetProjectId(string key)
	{
		string value = (string)Environment.Session[key];
		if(null == value)
		{
			value = Guid.NewGuid().ToString("B").ToUpper();
			Environment.Session[key] = value;
		}
		return value;
	}

	private string GetDbProjectId()
	{
		return GetProjectId("DbProjectId");
	}

	private string GetSystemHintPath(string assemblyFile)
	{
		string frameworkDir = Path.GetDirectoryName(typeof(string).Assembly.Location);
		return Path.Combine(frameworkDir, assemblyFile);
	}
	
	private string TargetIDE
	{
		get { return Database.ExtendedProperties["TargetIDE"]; }
	}
	
	private string ProductVersion
	{
		get
		{
			switch(TargetIDE)
			{
				case "VSNET2002":
					return "7.0.9466";

				case "VSNET2003":
					return "7.10.3077";
			}
			return "Unknown";
		}
	}
	
	private string ShemaVersion
	{
		get
		{
			switch(TargetIDE)
			{
				case "VSNET2002":
					return "1.0";

				case "VSNET2003":
					return "2.0";
			}
			return "Unknown";
		}
	}
	
	private bool IsVS2003OrLater
	{
		get { return TargetIDE != "VSNET2002"; }
	}
##>