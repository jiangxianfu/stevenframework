using System;
using System.Collections.Generic;
using System.Text;

namespace STN.Data.SqlServer
{
    public sealed class Provider
    {
        public Provider()
        {

        }	

		// Table and view fields
<#		foreach(ITable table in Database.Tables)
		{ ##>
		private static readonly <#= GetTableCodeNameManage(table) #> _<#= GetTableCodeNameManage(table) #>=new <#= GetTableCodeNameManage(table) #>();
<#		} ##>	

		
<#		foreach(ITable table in Database.Tables)
		{ ##>
		/// <summary>
		/// Gets an object that represents the <c><#= table.Name #></c> <#= table.View ? "view": "table" #>.
		/// </summary>
		/// <value>A reference to the <see cref="<#= GetTableClassName(table) #>"/> object.</value>
		public static <#= GetTableCodeNameManage(table) #> <#= GetTableCodeNameManage(table) #>
		{
			get
			{
			return _<#= GetTableCodeNameManage(table) #>;
			}
		}

<#		} ##>
	} // End of <#= GetClassName() #> class
} // End of namespace
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private IDatabase Database
	{
		get { return (IDatabase)Environment["Database"]; }
	}

	public override string RelativeFilePath
	{
		get { return SharedUtils.GetBaseClassRelativePath("Provider.cs"); }
	}

	private string GetClassName()
	{
		return Database.CodeName + "_Base";
	}

	private string GetUserClassName()
	{
		return Database.CodeName;
	}
	
	private string GetTableClassName(ITable table)
	{
		return SharedUtils.GetGatewayClassName(table);
	}
	
	private string GetTableFieldName(ITable table)
	{
		return SharedUtils.GetFieldName(table.CodeName);
	}

	private string GetNamespace()
	{
		return SharedUtils.GetDbTierBaseNamespace(Database);
	}
	private string GetTableCodeNameManage(ITable table)
	{
	  return table.CodeName+"Manage";
	}
##>