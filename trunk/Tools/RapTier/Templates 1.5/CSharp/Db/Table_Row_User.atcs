using System;
using System.Collections.Generic;
using System.Text;

namespace <#= GetNamespace() #>
{
	/// <summary>
	/// Represents a record in the <c><#= Table.CodeName #></c> <#= GetTableView() #>.
	/// </summary>
	public class <#= Table.CodeName #>:<#= Table.CodeName #>_base
	{
	} // End of <#= GetClassName() #> class
} // End of namespace
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private ITable Table
	{
		get { return (ITable)Environment["Table"]; }
	}

	public override bool RewriteExistingFile
	{
		get { return false; }
	}

	public override string RelativeFilePath
	{
		get { return SharedUtils.GetUserClassRelativePath("BO\\Entities\\"+Table.CodeName + ".cs"); }
	}
	
	private string GetTableRowClassName(ITable table)
	{
		return table.CodeName + "Row";
	}
	
	private string GetClassName()
	{
		return GetTableRowClassName(Table);
	}

	private string GetPropertyName(IColumn column)
	{
		return SharedUtils.GetPropertyName(column.CodeName);
	}

	private string GetTableView()
	{
		return Table.View ? "view" : "table";
	}
	
	private string GetNamespace()
	{
		return SharedUtils.GetDbTierUserNamespace(Table.Database);
	}
	private bool ShouldGenerateNullableProperty(IColumn column)
	{
		return column.Nullable && SharedUtils.ToDotNetType(column.OleDbType).IsValueType;
	}
	private string GetDotNetTypeName(IColumn column)
	{
		return SharedUtils.GetCSharpTypeName(GetDotNetType(column));
	}
	private Type GetDotNetType(IColumn column)
	{
		return SharedUtils.GetDotNetType(column, false);
	}
##>