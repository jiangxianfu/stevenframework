<#--
		RapTier multi-tier Code Generator http://www.SharpPower.com
		Copyright (c) 2002-2004 SharpPower. All rights reserved.
--##>
----------------------------------------------------------
-- Oracle Package Declaration for the '<#= Database.CodeName #>' database
-- Generator: RapTier http://www.SharpPower.com

<# SharedUtils.WriteMultiLine(Writer, SharedUtils.CopyrightText, "-- "); ##>
----------------------------------------------------------
<#	if(0 < Database.Tables.Count)
	{ ##>


CREATE OR REPLACE PACKAGE <#= GetPackageName(Database.Tables[0]) #> AS

<#	foreach(ITable table in Database.Tables)
	{ ##>
	TYPE <#= GetCursorTypeName(table) #> IS REF CURSOR; 
<#	} ##>

<#	foreach(ITable table in Database.Tables)
	{ ##>

	------------------------------------------------------
	-- Stored procedures for the '<#= table.Name #>' table.
	------------------------------------------------------

	-- Gets all records from the '<#= table.Name #>' table.
	PROCEDURE <#= GetGetAllProcName(table, false) #>
	(
		o_cursor OUT <#= GetCursorTypeName(table) #> 
	);
<#	if(GetHasPrimaryKey(table))
	{ ##>

	-- Gets a record from the '<#= table.Name #>' table using the primary key value.
	PROCEDURE <#= GetGetByKeyProcName(table, false) #>
	(
<#		foreach(IColumn column in table.Columns.GetPrimaryColumns())
		{ ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>,
<#		} ##>
		o_cursor OUT <#= GetCursorTypeName(table) #> 
	);
<#	} ##>
<#	foreach(IRelation relation in table.ParentRelations)
	{ ##>

	-- Gets all records for the specified foreign key.
	PROCEDURE <#= GetGetByForeignKeyProcName(relation, false) #>
	(
<#		foreach(IColumn column in relation.ChildColumns)
		{ ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>,
<#		} ##>
		o_cursor OUT <#= GetCursorTypeName(table) #>
	);
<#	} ##>
<#	if(table.Updatable)
	{
		if(0 < table.Columns.GetWriteableColumns().Length)
		{ ##>

	-- Inserts a new record into the '<#= table.Name #>' table.
	PROCEDURE <#= GetInsertProcName(table, false) #>
	(
<#	bool firstInsertColumn = true;
	foreach(IColumn column in table.Columns.GetWriteableColumns())
	{
		if(firstInsertColumn)
			firstInsertColumn = false;
		else
		{ ##>,
<#		} ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>
<#	} #>
	);
<#		} // End of ##>
<#	if(GetHasPrimaryKey(table))
	{
		if(0 < table.Columns.GetWriteableNonPrimaryColumns().Length)
		{ ##>

	-- Updates a record in the '<#= table.Name #>' table.
	PROCEDURE <#= GetUpdateProcName(table, false) #>
	(
		-- Parameters for updateable non-primary key columns
<#	foreach(IColumn column in table.Columns.GetWriteableNonPrimaryColumns())
	{ ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) #>,
<#	} ##>
		-- Primary key parameters
<#	bool firstUpdateColumn = true;
	foreach(IColumn column in table.Columns.GetPrimaryColumns())
	{ 
		if(firstUpdateColumn)
			firstUpdateColumn = false;
		else
		{ ##>,
<#		} ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>
<#	} #>
	);
<#		} // End of if(0 < GetWriteableNonPrimaryColumns) ##>

	-- Deletes a record from the '<#= table.Name #>' table using the primary key value.
	PROCEDURE <#= GetDeleteByKeyProcName(table, false) #>
	(
<#		bool firstDeleteByPKColumn = true;
		foreach(IColumn column in table.Columns.GetPrimaryColumns())
		{ 
			if(firstDeleteByPKColumn)
				firstDeleteByPKColumn = false;
			else
			{ ##>,
<#			} ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>
<#		} #>
	);
<#	} // End of if(GetHasPrimaryKey) ##>
<#	foreach(IRelation relation in table.ParentRelations)
	{ ##>

	-- Delete records from the '<#= table.Name #>' table using a foreign key.
	PROCEDURE <#= GetDeleteByForeignKeyProcName(relation, false) #>
	(
<#		bool firstDeleteByFKColumn = true;
		foreach(IColumn column in relation.ChildColumns)
		{ 
			if(firstDeleteByFKColumn)
				firstDeleteByFKColumn = false;
			else
			{ ##>,
<#			} ##>
		<#= GetSqlParameterName(column) #> <#= GetSqlParameterType(column) ##>
<#		} #>
	);
<#	} ##>

	-- Deletes all records from the '<#= table.Name #>' table.
	PROCEDURE <#= GetDeleteAllProcName(table, false) #>;
<#	} 
	} // End of if(table.Updatable) ##>
END;	-- End of the package declaration
<#	
	// Display warnig message
	Environment.AddInfo("The Oracle stored procedures were saved into 'Db\\" + 
				RelativeFilePath + "'. Add them into your database before running the generated code.");

	} // End of if(0 < Database.Tables.Count)				
##>
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.Data;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private IDatabase Database
	{
		get { return (IDatabase)Environment["Database"]; }
	}

	public override string RelativeFilePath
	{
		get { return @"Sql\" + Database.CodeName + "_PackageDeclaration_Oracle.sql"; }
	}
	
	public override bool Enabled
	{
		get
		{
			return SharedUtils.IsOracle(Database) &&
				SharedUtils.GetGenerateStoredProcedures(Database);
		}
	}
	
	private string GetFullTableName(ITable table)
	{
		string fullName = "";
		if(null != table.Schema && 0 < table.Schema.Length)
			fullName += GetSqlName(table.Schema) + ".";
		fullName += GetSqlName(table.Name);
		return fullName;
	}
	
	private string GetSqlName(string value)
	{
		return value;
	}
	
	internal static string GetGetAllProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_GetAll";
	}
	
	internal static string GetGetByForeignKeyProcName(IRelation relation, bool fullName)
	{
		string procName = SharedUtils.GetColumnListName(relation.ChildColumns);
		ITable table = relation.ChildColumns[0].Table;
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_GetBy" + procName;
	}
	
	internal static string GetGetByKeyProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_GetByPrimaryKey";
	}
	
	internal static string GetInsertProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_Insert";
	}

	internal static string GetUpdateProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_Update";
	}

	internal static string GetDeleteByKeyProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_DelByPrimaryKey";
	}
	
	internal static string GetDeleteByForeignKeyProcName(IRelation relation, bool fullName)
	{
		string procName = SharedUtils.GetColumnListName(relation.ChildColumns);
		ITable table = relation.ChildColumns[0].Table;
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_DelBy" + procName;
	}
	
	internal static string GetDeleteAllProcName(ITable table, bool fullName)
	{
		return (fullName ? GetPackageName(table) + "." : "") + table.CodeName + "_DeleteAll";
	}
	
	private bool GetHasPrimaryKey(ITable table)
	{
		return 0 < table.Columns.GetPrimaryColumns().Length;
	}
	
	internal static string GetSqlParameterName(IColumn column)
	{
		return "i_" + column.CodeName;
	}

	internal static string GetSqlParameterType(IColumn column)
	{
		string sqlType = column.SqlType;
		if(null != sqlType)
		{
			int bracketIndex = sqlType.IndexOf('(');
			if(-1 != bracketIndex)
				sqlType = sqlType.Substring(0, bracketIndex);
		}
		return sqlType;
	}
	
	internal static string GetPackageName(ITable table)
	{
		return table.Schema + ".RAPTIER_SP_PKG";
	}
	
	private string GetCursorTypeName(ITable table)
	{
		return table.CodeName  + "Cursor";
	}
##>