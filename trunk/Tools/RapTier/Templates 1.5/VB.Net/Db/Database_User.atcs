<#--
		RapTier multi-tier Code Generator http://www.SharpPower.com
		Copyright (c) 2002-2004 SharpPower. All rights reserved.
--##>
' <fileinfo name="<#= RelativeFilePath #>">
'		<copyright>
<# SharedUtils.WriteMultiLine(Writer, SharedUtils.CopyrightText, "'			"); ##>
'		</copyright>
'		<remarks>
'			You can update this source code manually. If the file
'			already exists it will not be rewritten by the generator.
'		</remarks>
'		<generator rewritefile="<#= RewriteExistingFile #>" infourl="http://www.SharpPower.com">RapTier</generator>
' </fileinfo>

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
<#	if(GetNamespace() != SharedUtils.GetDbTierBaseNamespace(Database))
	{ ##>
Imports <#= SharedUtils.GetDbTierBaseNamespace(Database) #>
<#	} ##>

<#	if(0 < RelativeNamespace.Length)
	{ ##>
Namespace <#= RelativeNamespace #>
<#	} ##>
''' <summary>
''' Represents a connection to the <c><#= Database.CodeName #></c> database.
''' </summary>
''' <remarks>
''' If the <c><#= GetClassName() #></c> goes out of scope, the connection to the 
''' database is not closed automatically. Therefore, you must explicitly close the 
''' connection by calling the <c>Close</c> or <c>Dispose</c> method.
''' </remarks>
<#	if(0 < Database.Tables.Count)
{ ##>
''' <example>
''' using(<#= GetClassName() #> db = new <#= GetClassName() #>())
''' {
'''		<#= GetRowClassName(Database.Tables[0])#>[] rows = db.<#= 
				GetTableClassName(Database.Tables[0]) #>.GetAll();
''' }
''' </example>
<#	} ##>	
Public Class <#= GetClassName() #>
		Inherits <#= GetClassName() #>_Base
	''' <summary>
	''' Initializes a new instance of the <see cref="<#= GetClassName() #>"/> class.
	''' </summary>
	Public Sub New()
		MyBase.New()
		' EMPTY
	End Sub
	
	''' <summary>
	''' Creates a new connection to the database.
	''' </summary>
	''' <returns>An <see cref="System.Data.IDbConnection"/> object.</returns>
	Protected Overrides Function CreateConnection() As IDbConnection
#If ODBC Then
		Return new Microsoft.Data.Odbc.OdbcConnection("INSERT ODBC CONNECTION STRING")
<#	if(SharedUtils.IsSQLServer(Database))
	{ ##>
#ElseIf SQL_CLIENT Then
		Return New System.Data.SqlClient.SqlConnection( _
			<#= QuoteSnippetString(ConvertConnectionString(Database.Connection,
					new string[]{"Initial Catalog", "Data Source", "Integrated Security", "User ID", "Password"},
					null), "				") #>)
<#	} ##>
<#	if(SharedUtils.IsSybaseAse(Database))
	{ ##>
#ElseIf ASE_CLIENT Then
		Return New System.Data.SqlClient.SqlConnection( _
			<#= QuoteSnippetString(ConvertConnectionString(Database.Connection,
					new string[]{"Database", "Data Source", "User ID", "Password"},
					null), "				") #>)
<#	} ##>
<#	if(SharedUtils.IsOracle(Database))
	{ ##>
#ElseIf ORACLE_CLIENT Then
		Return New System.Data.OracleClient.OracleConnection( _
			<#= QuoteSnippetString(ConvertConnectionString(Database.Connection,
					new string[]{"Data Source", "User ID", "Password"},
					null), "				") #>)
<#	} ##>
<#	if(SharedUtils.IsMySQL(Database))
	{ ##>
#ElseIf MYSQL_BYTE_FX Then
		Return New ByteFX.Data.MySqlClient.MySqlConnection( _
			<#= QuoteSnippetString(ConvertConnectionString(Database.Connection,
					new string[]{"Location", "Data Source", "User ID", "Password"},
					new string[]{"Data Source", "Database", "User ID", "Password"}),
						"				") #>)
<#	} ##>
#Else
		Return New System.Data.OleDb.OleDbConnection( _
				<#
				string dbConnString = Database.Connection;
				if(SharedUtils.IsOracle(Database) && SharedUtils.GetGenerateStoredProcedures(Database)
					&& -1 != dbConnString.ToLower().IndexOf("provider=oraoledb.oracle")
					&& -1 == dbConnString.ToLower().IndexOf("plsqlrset="))
				{
					if(!dbConnString.EndsWith(";"))
						dbConnString += ";";
					dbConnString += "PLSQLRSet=1";
				}				
				
				string lowCaseDbConnString = dbConnString.ToLower();
				if(-1 != lowCaseDbConnString.IndexOf("user id") && 
							-1 == lowCaseDbConnString.IndexOf("password="))
				{
					Environment.AddWarning("The DB connection string does not include the database password." + 
						" Create a new project and check the 'Allow Saving Password' checkbox, " +
						"or change the connection string in the " + GetClassName() + " class manually.");
				}
				Writer.Write(QuoteSnippetString(dbConnString, "			"));
				#>)
#End If
	End Function

<#	if(SharedUtils.IsOracle(Database))
	{ ##>
#If ORACLE_CLIENT Then
	''' <summary>
	''' Creates <see cref="System.Data.IDataReader"/> for the specified DB command.
	''' </summary>
	''' <param name="command">The <see cref="System.Data.IDbCommand"/> object.</param>
	Protected Friend Overrides Function ExecuteReader(command As IDbCommand) As IDataReader
		If CommandType.StoredProcedure = command.CommandType And _
				Not command.Parameters.Contains(CreateCollectionParameterName("o_cursor")) Then
			Dim parameter As IDbDataParameter = AddParameter(command, "o_cursor", DbType.Object, Nothing)
			parameter.Direction = ParameterDirection.Output
			CType(parameter, System.Data.OracleClient.OracleParameter).OracleType = System.Data.OracleClient.OracleType.Cursor
		End If
		Return MyBase.ExecuteReader(command)
	End Function
#End If
<#	} ##>

	''' <summary>
	''' Creates a DataTable object for the specified command.
	''' </summary>
	''' <param name="command">The <see cref="System.Data.IDbCommand"/> object.</param>
	''' <returns>A reference to the <see cref="System.Data.DataTable"/> object.</returns>
	Protected Friend Function CreateDataTable(command As IDbCommand) As DataTable
		Dim dataTable As DataTable = New DataTable()
		Dim dataAdapter As System.Data.Common.DbDataAdapter
#If ODBC Then
		dataAdapter = New System.Data.Odbc.OdbcDataAdapter(CType(command, System.Data.Odbc.OdbcCommand))
<#	if(SharedUtils.IsSQLServer(Database))
	{ ##>
#ElseIf SQL_CLIENT Then
		dataAdapter = New System.Data.SqlClient.SqlDataAdapter(CType(command, System.Data.SqlClient.SqlCommand))
<#	} ##>
<#	if(SharedUtils.IsSybaseAse(Database))
	{ ##>
#ElseIf ASE_CLIENT Then
		dataAdapter = New Sybase.Data.AseClient.AseDataAdapter(CType(command, Sybase.Data.AseClient.AseCommand))
<#	} ##>
<#	if(SharedUtils.IsOracle(Database))
	{ ##>
#ElseIf ORACLE_CLIENT Then
		dataAdapter = New System.Data.OracleClient.OracleDataAdapter(CType(System.Data.OracleClient.OracleCommand, command))
<#	} ##>
<#	if(SharedUtils.IsMySQL(Database))
	{ ##>
#ElseIf MYSQL_BYTE_FX Then
		dataAdapter = New ByteFX.Data.MySqlClient.MySqlDataAdapter(CType(command, ByteFX.Data.MySqlClient.MySqlCommand))
<#	} ##>
#Else
		dataAdapter = New System.Data.OleDb.OleDbDataAdapter(CType(command, System.Data.OleDb.OleDbCommand))
#End If
		dataAdapter.Fill(dataTable)
		Return dataTable
	End Function

	''' <summary>
	''' Returns a SQL statement parameter name that is specific for the data provider.
	''' For example it returns ? for OleDb provider, or @paramName for MS SQL provider.
	''' </summary>
	''' <param name="paramName">The data provider neutral SQL parameter name.</param>
	''' <returns>The SQL statement parameter name.</returns>
	Protected Friend Overrides Function CreateSqlParameterName(paramName As String) As String
#If ODBC Then
		Return "?"
<#	if(SharedUtils.IsSQLServer(Database))
	{ ##>
#ElseIf SQL_CLIENT Then
		Return "@" + paramName
<#	} ##>
<#	if(SharedUtils.IsSybaseAse(Database))
	{ ##>
#ElseIf ASE_CLIENT Then
		Return "@" + paramName
<#	} ##>
<#	if(SharedUtils.IsOracle(Database))
	{ ##>
#ElseIf ORACLE_CLIENT Then
		Return ":" + paramName
<#	} ##>
<#	if(SharedUtils.IsMySQL(Database))
	{ ##>
#ElseIf MYSQL_BYTE_FX Then
		Return "@" + paramName
<#	} ##>
#Else
		Return "?"
#End If
	End Function
	
	''' <summary>
	''' Creates a .Net data provider specific parameter name that is used to
	''' create a parameter object and add it to the parameter collection of
	''' <see cref="System.Data.IDbCommand"/>.
	''' </summary>
	''' <param name="baseParamName">The base name of the parameter.</param>
	''' <returns>The full data provider specific parameter name.</returns>
	Protected Overrides Function CreateCollectionParameterName(baseParamName As String) As String
#If ODBC Then
		Return "@" + baseParamName
<#	if(SharedUtils.IsOracle(Database))
	{ ##>
#ElseIf ORACLE_CLIENT Then
		Return baseParamName
<#	} ##>
#Else
		Return "@" + baseParamName
#End If
	End Function
End Class
<#	if(0 < RelativeNamespace.Length)
	{ ##>
End Namespace
<#	} ##>
<#
	// MyOleDb warning message 
	if(SharedUtils.IsMySQL(Database))
	{
		Environment.AddWarning("The generated code uses the MyOleDb data provider"
			+ " to connect to the database. It is recommended that you switch"
			+ " to ByteFX or another MySql data provider. Check the RapTier"
			+ " documentation to find out how you can do it.");
	}
#>
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.Collections.Specialized;
using System.Text;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private IDatabase Database
	{
		get { return (IDatabase)Environment["Database"]; }
	}

	public override bool RewriteExistingFile
	{
		get { return false; }
	}

	public override string RelativeFilePath
	{
		get { return SharedUtils.GetUserClassRelativePath(GetClassName() + ".vb"); }
	}
	
	private string GetClassName()
	{
		return Database.CodeName;
	}

	private string RelativeNamespace
	{
		get { return SharedUtils.UserClassSubDirectory; }
	}

	private string GetNamespace()
	{
		return SharedUtils.GetDbTierUserNamespace(Database);
	}
	
	private string GetTableClassName(ITable table)
	{
		return table.CodeName + (table.View ? "View" : "Table");
	}

	private string GetRowClassName(ITable table)
	{
		return table.CodeName + "Row";
	}

	private string ConvertConnectionString(string conn, 
						string[] oleDbParams, string[] targetDbParams)
	{
		StringDictionary propMap = new StringDictionary();
		if(null == targetDbParams)
			targetDbParams = oleDbParams;
		for(int i = 0; i < oleDbParams.Length; i++)
			propMap.Add(oleDbParams[i].ToLower(), targetDbParams[i]);

		string targetDbConnection = "";
		foreach(string property in Database.Connection.Split(';'))
		{
			int equalIndex = property.IndexOf('=');
			if(0 < equalIndex && property.Length - 1 > equalIndex)
			{
				string targetDbPropName = propMap[property.Substring(0, equalIndex).ToLower()];
				if(null != targetDbPropName)
				{
					if(0 < targetDbConnection.Length)
						targetDbConnection += ";";
					targetDbConnection += targetDbPropName + "=" + property.Substring(equalIndex + 1);
				}
			}
		}
		return targetDbConnection;
	}

	private string QuoteSnippetString(string value, string indent)
	{
		int maxLength = 80 - indent.Length * 4;
	
		StringBuilder dynStr = new StringBuilder(value.Length + 5);
		dynStr.Append("\"");

		for(int i = 0; i < value.Length; i++)
		{
			char ch = value[i];
			if('"' == ch)
				dynStr.Append("\"\"");
			else
				dynStr.Append(ch);

			if(i > 0 && i % maxLength == 0)
			{
				dynStr.Append("\" + _\r\n");
				dynStr.Append(indent);
				dynStr.Append("\"");
			}
		}

		dynStr.Append("\"");
		return dynStr.ToString();
	}
##>