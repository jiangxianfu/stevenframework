<#--
		RapTier multi-tier Code Generator http://www.SharpPower.com
		Copyright (c) 2002-2004 SharpPower. All rights reserved.
--##>
// <fileinfo name="<#= RelativeFilePath #>">
//		<copyright>
<# SharedUtils.WriteMultiLine(Writer, SharedUtils.CopyrightText, "//			"); ##>
//		</copyright>
//		<remarks>
//			You can update this source code manually. If the file
//			already exists it will not be rewritten by the generator.
//		</remarks>
//		<generator rewritefile="<#= RewriteExistingFile #>" infourl="http://www.SharpPower.com">RapTier</generator>
// </fileinfo>

using System;
<#	if(GetNamespace() != SharedUtils.GetDbTierBaseNamespace(Table.Database))
	{ ##>
using <#= SharedUtils.GetDbTierBaseNamespace(Table.Database) #>;
<#	} ##>

namespace <#= GetNamespace() #>
{
	/// <summary>
	/// Represents a record in the <c><#= Table.CodeName #></c> <#= GetTableView() #>.
	/// </summary>
	public class <#= GetClassName() #> : <#= GetClassName() #>_Base
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="<#= GetClassName() #>"/> class.
		/// </summary>
		public <#= GetClassName() #>()
		{
			// EMPTY
		}
	} // End of <#= GetClassName() #> class
} // End of namespace
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private ITable Table
	{
		get { return (ITable)Environment["Table"]; }
	}

	public override bool RewriteExistingFile
	{
		get { return false; }
	}

	public override string RelativeFilePath
	{
		get { return SharedUtils.GetUserClassRelativePath(GetTableRowClassName(Table) + ".cs"); }
	}
	
	private string GetTableRowClassName(ITable table)
	{
		return table.CodeName + "Row";
	}
	
	private string GetClassName()
	{
		return GetTableRowClassName(Table);
	}

	private string GetPropertyName(IColumn column)
	{
		return SharedUtils.GetPropertyName(column.CodeName);
	}

	private string GetTableView()
	{
		return Table.View ? "view" : "table";
	}
	
	private string GetNamespace()
	{
		return SharedUtils.GetDbTierUserNamespace(Table.Database);
	}
##>