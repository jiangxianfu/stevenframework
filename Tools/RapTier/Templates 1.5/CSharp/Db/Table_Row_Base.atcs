using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

namespace <#= GetNamespace() #>
{
	/// <summary>
	/// The base class for <see cref="<#= GetUserClassName() #>"/> that 
	/// represents a record in the <c><#= Table.Name #></c> <#= GetTableView() #>.
	/// </summary>
	/// <remarks>
	/// Do not change this source code manually. Update the <see cref="<#= GetUserClassName() #>"/>
	/// class if you need to add or change some functionality.
	/// </remarks>
	public class <#= GetUserClassName() #>_base:abstractInfo
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="<#= GetClassName() #>"/> class.
		/// </summary>
		public <#= GetUserClassName() #>_base()
		{
		}
			
//////////////////////////////////////////////////////////////////////////////////////////	
<#		foreach(IColumn column in Table.Columns)
		{ ##>
		
<#		if(ShouldGenerateNullableProperty(column))
		{ ##>
		private <#= GetDotNetTypeName(column)#>? <#= GetFieldName(column) #>;
<#		} ##>
<#		else
		{ ##>
		private <#= GetDotNetTypeName(column)#> <#= GetFieldName(column) #>;
<#		} ##>
<#		} ##>
///////////////////////////////////////////////////////////////////////////////////////
<#		// Write properties
		foreach(IColumn column in Table.Columns)
		{ ##>
		/// <summary>
		/// Gets or sets the <c><#= column.Name #></c> column value.
<#			if(column.Nullable)
			{ ##>
		/// This column is nullable.
<#			} ##>		
		/// </summary>
		/// <value>The <c><#= column.Name #></c> column value.</value>
<#		if(ShouldGenerateNullableProperty(column))
			{ ##>	
		public <#= GetDotNetTypeName(column)#>? <#= GetPropertyName(column) #>
<#          }##>
<#      else{ ##>
		public <#= GetDotNetTypeName(column)#> <#= GetPropertyName(column) #>
<#        } ##>		
		{
			get
			{
				return <#= GetFieldName(column) #>;
			}
			set
			{
				<#= GetFieldName(column) #> = value;
			}
		}		

<#		} ##>	
		

        /// <summary>
        /// reader of Data   all of please reader.Close() 
        /// </summary>
        /// <param name="reader"></param>
		public override void SetValue(IDataReader reader)
		{
			
			<#			foreach(IColumn column in Table.Columns)
						{ ##>
int <#= GetColumnIndexVariableName(column) #> = reader.GetOrdinal("<#= column.Name #>");
			<#			} ##>
			
			<#					foreach(IColumn column in Table.Columns)
								{
									if(column.Nullable)
									{ ##>
if(!reader.IsDBNull(<#=GetColumnIndexVariableName(column)#>))
				<#					} ##>
this.<#= GetFieldName(column) #> = <#= GetReaderCode(column) #>;
			<#					} ##>
	}	       
	} // End of <#= GetClassName() #> class
} // End of namespace

<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.Data.OleDb;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private ITable Table
	{
		get { return (ITable)Environment["Table"]; }
	}
	private string GetSqlName(string name)
	{
		return SharedUtils.GetSqlName(name, Table.Database);
	}
	public override string RelativeFilePath
	{
		get { return SharedUtils.GetBaseClassRelativePath("BO\\Base\\"+GetUserClassName() + "_base.cs"); }
	}

	private string GetClassName()
	{
		return Table.CodeName + "Row_Base";
	}
	
	private string GetUserClassName()
	{
		return Table.CodeName;
	}
	
	private bool ShouldGenerateNullableProperty(IColumn column)
	{
		return column.Nullable && SharedUtils.ToDotNetType(column.OleDbType).IsValueType;
	}
	
	private string GetFieldName(IColumn column)
	{
		return SharedUtils.GetFieldName(column.CodeName);
	}
	
	private string GetPropertyName(IColumn column)
	{
		return SharedUtils.GetPropertyName(column.CodeName);
	}
	
	private Type GetDotNetType(IColumn column)
	{
		return SharedUtils.GetDotNetType(column, false);
	}
	
	private string GetDotNetTypeName(IColumn column)
	{
		return SharedUtils.GetCSharpTypeName(GetDotNetType(column));
	}
	
	private string GetTableView()
	{
		return Table.View ? "view" : "table";
	}
	
	private string GetNamespace()
	{
		return SharedUtils.GetDbTierBaseNamespace(Table.Database);
	}
	private string GetColumnIndexVariableName(IColumn column)
	{
		return SharedUtils.GetParameterName(column.CodeName, false) + "ColumnIndex";
	}
        private string GetReaderCode(IColumn column)
	{
		string cast = "";
		string converter = "";
		string method = "GetValue";
		
		Type columnType = GetDotNetType(column);
		if(columnType == typeof(byte[]))
			cast = "(byte[])";
		else if(columnType == typeof(TimeSpan))
			cast = "(TimeSpan)";
		else if(columnType == typeof(Guid))
			method = "GetGuid";
		else if(columnType != typeof(object))
		{
			method = "GetValue";
			converter = "Convert.To" + columnType.Name + "(";
		}

		string code = cast + converter + "reader." + method + "(" + GetColumnIndexVariableName(column) + ")";
		if(0 < converter.Length)
			code += ")";
		return code;
	}
		private string GetFullTableName(ITable table)
	{
		string fullName = "[";
		if(!SharedUtils.IsMySQL(table.Database))
		{
			if(null != table.Schema && 0 < table.Schema.Length)
				fullName += GetSqlName(table.Schema) + "].[";
		}
			
		fullName += GetSqlName(table.Name);
		fullName += "]";
		return fullName;
	}
##>