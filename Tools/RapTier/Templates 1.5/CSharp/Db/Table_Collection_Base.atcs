using System;
using System.Data;
using System.Collections.Generic;
using <#= GetNamespace() #>;
<#	if(GetNamespace() != SharedUtils.GetDbTierUserNamespace(Table.Database))
	{ ##>
using <#= SharedUtils.GetDbTierUserNamespace(Table.Database) #>;
<#	} ##>

namespace STN.Data.SqlServer
{
	public class <#= GetTableCodeNameManage() #>_Base:ManageBase<<#=GetTableCodeName()#>>
	{
<#		
		if(0 == Table.Columns.GetPrimaryColumns().Length)
		{
			if(Table.Updatable)
				Environment.AddWarning("'" + Table.Name + "' does not have a primary key.");
		}
		else
		{ 
			// Generate only if table/view has primary key
			##>

		/// <summary>
		/// Gets <see cref="<#= GetRowClassName(Table) #>"/> by the primary key.
		/// </summary>
<#		foreach(IColumn column in Table.Columns.GetPrimaryColumns())
		{ ##>
		/// <param name="<#= GetParameterName(column, false) #>">The <c><#= column.Name #></c> column value.</param>
<#		} ##>
		/// <returns>An instance of <see cref="<#= GetRowClassName(Table) #>"/> or null reference 
		/// (Nothing in Visual Basic) if the object was not found.</returns>
		public virtual <#=GetTableCodeName()#> GetByPrimaryKey(<# WriteDeclareMethodParameterList(Table.Columns.GetPrimaryColumns(), false); #>)
		{
<#			if(GenerateStoredProcedures)
			{ ##>
			IDbCommand cmd = _db.CreateCommand("<#= GetGetByKeyProcName(Table) #>", true);
<#			}
			else
			{ ##>
			SQLCondition sql = new SQLCondition();
			sql.CommandText.Append("SELECT TOP 1 * FROM <#= GetFullTableName(Table) #> WHERE ");
			sql.CommandText.Append("<#
			bool getByKeyFirstItem = true;
			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{
				if(getByKeyFirstItem)
					getByKeyFirstItem = false;
				else
				{ ##>.Append(" AND ").Append("<#
				} ##>
<#= GetSqlName(column.Name) #>=@<#= GetSqlParameterName(column) #>")<#
			} #>;
<#			} ##>			
<#			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,<#= GetParameterName(column, true) #>);
<#			} ##>
			return base.Select_One(sql);
		}
<# }##>
<#		if(Table.Updatable)
		{ ##>
<#			if(0 < Table.Columns.GetWriteableColumns().Length)
			{ ##>

		/// <summary>
		/// Adds a new record into the <c><#= Table.Name #></c> <#= GetTableView() #>.
		/// </summary>
		/// <param name="value">The <see cref="<#= GetRowClassName(Table) #>"/> object to be inserted.</param>
		public virtual void Insert(<#=GetTableCodeName()#> value)
		{
<#			IColumn identityColumn = null;
			if(SharedUtils.GetGenerateIdentity(Table.Database))
				identityColumn = SharedUtils.GetIdentityColumn(Table);

			if(GenerateStoredProcedures)
			{ ##>
			IDbCommand cmd = _db.CreateCommand("<#= GetInsertProcName(Table) #>", true);
<#			}
			else
			{ ##>
			SQLCondition sql = new SQLCondition();
			sql.CommandText.Append(@"INSERT INTO <#= GetFullTableName(Table) #>(
<#			
			bool insertFirstItem = true;
			foreach(IColumn column in Table.Columns.GetWriteableColumns())
			{
				if(insertFirstItem)
					insertFirstItem = false;
				else
				{ ##>,
<#				} ##>
				<#= GetSqlName(column.Name) #><#
			} ##>) VALUES (
<#
			insertFirstItem = true;
			foreach(IColumn column in Table.Columns.GetWriteableColumns())
			{ 
				if(insertFirstItem)
					insertFirstItem = false;
				else
				{ ##>,
<#				} ##>
				@<#= GetSqlParameterName(column) #><#
			} ##>)<#
			if(null != identityColumn && !SharedUtils.IsAccess(Table.Database) && !SharedUtils.IsSybaseSqlAnywhere(Table.Database))
				Writer.Write(";SELECT @@IDENTITY");
			#>");
<#			} // End of if(GenerateStoredProcedures) ##>
<#			foreach(IColumn column in Table.Columns.GetWriteableColumns())
			{ 
				if(ShouldGenerateNullableProperty(column))
				{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,
				value.<#= GetPropertyName(column) #>.HasValue ? (object)value.<#= GetPropertyName(column) #> : DBNull.Value);
<#				}
				else
				{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,value.<#= GetPropertyName(column) #>);
<#				}
			} ##>
<#			if(null != identityColumn)
			{ ##>
			value.<#= GetPropertyName(identityColumn) #> = Convert.To<#= GetDotNetType(identityColumn).Name #>(base.ExecuteScalar(sql));
<#			}
			else
			{ ##>
			base.ExecuteNonQuery(sql);
<#			} ##>
		}
<#			} // End of GetWritebleColumns().Length ##>
<#		// Generate only if table/view has primary key
		if(0 < Table.Columns.GetPrimaryColumns().Length)
		{ 
			if(0 < Table.Columns.GetWriteableNonPrimaryColumns().Length)
			{ ##>

		/// <summary>
		/// Updates a record in the <c><#= Table.Name #></c> table.
		/// </summary>
		/// <param name="value">The <see cref="<#= GetRowClassName(Table) #>"/>
		/// object used to update the table record.</param>
		/// <returns>true if the record was updated; otherwise, false.</returns>
		public virtual bool Update(<#=GetTableCodeName()#> value)
		{
<#			if(GenerateStoredProcedures)
			{ ##>
			IDbCommand cmd = _db.CreateCommand("<#= GetUpdateProcName(Table) #>", true);
<#			}
			else
			{ ##>
			SQLCondition sql = new SQLCondition();
			sql.CommandText.Append(@"UPDATE <#= GetFullTableName(Table) #> SET 
<#			bool updateFirstItem = true;
			foreach(IColumn column in Table.Columns.GetWriteableNonPrimaryColumns())
			{
				if(updateFirstItem)
					updateFirstItem = false;
				else
				{ ##>,
<#				} ##>
				<#= GetSqlName(column.Name) #>=@<#=GetSqlParameterName(column) #><#
			} ##> WHERE 
<#
			updateFirstItem = true;
			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{
				if(updateFirstItem)
					updateFirstItem = false;
				else
				{ ##> AND  
<#				} ##>
				<#= GetSqlName(column.Name) #>=@<#=	GetSqlParameterName(column) #><#
			} ##>");
<#			} // End of if(GenerateStoredProcedures) ##>			
<#			foreach(IColumn column in Table.Columns.GetWriteableNonPrimaryColumns())
			{ 
				if(ShouldGenerateNullableProperty(column))
				{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,
				value.<#= GetPropertyName(column) #>.HasValue ? (object)value.<#= GetPropertyName(column) #> : DBNull.Value);
<#				}
				else
				{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,value.<#= GetPropertyName(column) #>);
<#				}
			} ##>
<#			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,value.<#= GetPropertyName(column) #>);
<#			} ##>
			return 0 != base.ExecuteNonQuery(sql);
		}		
<#			} // End of if(0 < Table.Columns.GetWriteableNonPrimaryColumns().Length) ##>


		/// <summary>
		/// Deletes a record from the <c><#= Table.Name #></c> <#= GetTableView() #> using
		/// the specified primary key.
		/// </summary>
<#		foreach(IColumn column in Table.Columns.GetPrimaryColumns())
		{ ##>
		/// <param name="<#= GetParameterName(column, false) #>">The <c><#= column.Name #></c> column value.</param>
<#		} ##>
		/// <returns>true if the record was deleted; otherwise, false.</returns>
		public virtual bool DeleteByPrimaryKey(<# WriteDeclareMethodParameterList(Table.Columns.GetPrimaryColumns(), false); #>)
		{
<#			if(GenerateStoredProcedures)
			{ ##>
			IDbCommand cmd = _db.CreateCommand("<#= GetDeleteByKeyProcName(Table) #>", true);
<#			}
			else
			{ ##>
			SQLCondition sql = new SQLCondition();
			sql.CommandText.Append("DELETE FROM <#= GetFullTableName(Table) #> WHERE ");
			sql.CommandText.Append("<#
			bool delByKeyFirstItem = true;
			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{
				if(delByKeyFirstItem)
					delByKeyFirstItem = false;
				else
				{ ##>.Append(" AND ").Append("<#
				} ##>
<#= GetSqlName(column.Name) #>=@<#= GetSqlParameterName(column) #>")<#
			} #>;
<#			} // End of if(GenerateStoredProcedures) ##>			
<#			foreach(IColumn column in Table.Columns.GetPrimaryColumns())
			{ ##>
			sql.AddcmdParam("@<#= GetSqlParameterName(column) #>",DbType.<#= column.DbType.ToString() #>,<#= GetParameterName(column, true) #>);
<#			} ##>
			return 0 != base.ExecuteNonQuery(sql);
		}
<#		} // End of if(0 < Table.Columns.GetPrimaryColumns().Length) ##>	

<#		} // End of if(Table.Updatable) ##>

		public virtual List<<#=GetTableCodeName()#>> GetALL()
			{
	<#			if(GenerateStoredProcedures)
				{ ##>
				IDbCommand cmd = _db.CreateCommand("<#= GetGetByKeyProcName(Table) #>", true);
	<#			}
				else
				{ ##>
				SQLCondition sql = new SQLCondition();
				sql.CommandText.Append("SELECT * FROM <#= GetFullTableName(Table) #>");			
				return base.Select(sql);
				<#}##>
			}
	} // End of <#= GetClassName() #> class
}  // End of namespace
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.Collections;
using System.Data;
using System.Text;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	enum ValueNullableParameter
	{
		Ignore,
		GenerateFalse,
		GenerateParamNull
	}

	private ITable Table
	{
		get { return (ITable)Environment["Table"]; }
	}

	public override string RelativeFilePath
	{
		get { return SharedUtils.GetBaseClassRelativePath("DAL\\Base\\"+GetTableCodeNameManage() + "_Base.cs"); }
	}
	
	private string GetClassName()
	{
		return GetTableClassName(Table);
	}
	private string GetTableCodeNameManage()
	{
	  return Table.CodeName+"Manage";
	}
	private string GetTableCodeName()
	{
	return Table.CodeName;
	}
	
	private string GetUserClassName()
	{
		return GetTableClassName(Table);
	}
	
	private string GetTableClassName(ITable table)
	{
		return SharedUtils.GetGatewayClassName(table);
	}
	
	private string GetTableView()
	{
		return Table.View ? "view" : "table";
	}

	private string GetRowClassName(ITable table)
	{
		return table.CodeName + "Row";
	}

	private string GetDbClassName()
	{
		return Table.Database.CodeName;
	}
	
	private bool IsValueType(IColumn column)
	{
		return SharedUtils.ToDotNetType(column.OleDbType).IsValueType;
	}
	
	private bool ShouldGenerateNullableProperty(IColumn column)
	{
		return column.Nullable && IsValueType(column);
	}
	
	private string GetColumnIndexVariableName(IColumn column)
	{
		return SharedUtils.GetParameterName(column.CodeName, false) + "ColumnIndex";
	}
	
	private string GetSqlParameterName(IColumn column)
	{
		return column.CodeName;
	}

	private string GetPropertyName(IColumn column)
	{
		return SharedUtils.GetPropertyName(column.CodeName);
	}
	
	private Type GetDotNetType(IColumn column)
	{
		return SharedUtils.GetDotNetType(column, false);
	}
	
	private string GetDotNetTypeName(IColumn column)
	{
		return SharedUtils.GetCSharpTypeName(GetDotNetType(column));
	}

	private void WriteDeclareMethodParameterList(IColumn[] columns, bool writeValueNullable)
	{
		bool firstItem = true;
		foreach(IColumn column in columns)
		{
			if(firstItem)
				firstItem = false;
			else
				Writer.Write(", ");

			Writer.Write(GetDotNetTypeName(column));
			Writer.Write(' ');
			Writer.Write(GetParameterName(column, true));
			if(writeValueNullable && column.Nullable && IsValueType(column))
			{
				Writer.Write(", bool ");
				Writer.Write(GetParameterName(column, false));
				Writer.Write("Null");
			}
		}	
	}

	private void WriteCallMethodParameterList(IColumn[] columns, string rowObjName, 
					bool property, ValueNullableParameter valueNullableParameter)
	{
		bool firstItem = true;
		foreach(IColumn column in columns)
		{
			if(firstItem)
				firstItem = false;
			else
				Writer.Write(", ");

			if(null != rowObjName && 0 < rowObjName.Length)
			{
				Writer.Write(rowObjName);
				Writer.Write('.');
			}
			if(property)
			{
				Writer.Write(GetPropertyName(column));
			}
			else
			{
				string paramName = GetParameterName(column, true);
				Writer.Write(paramName);
				
				if(column.Nullable && IsValueType(column))
				{
					if(valueNullableParameter == ValueNullableParameter.GenerateFalse)
						Writer.Write(", false");
					else if(valueNullableParameter == ValueNullableParameter.GenerateParamNull)
						Writer.Write(", " + paramName + "Null");
				}				
			}
		}	
	}
	
	private bool HasNullableValueTypeColumn(IColumn[] columns)
	{
		foreach(IColumn column in columns)
		{
			if(column.Nullable && IsValueType(column))
				return true;
		}
		return false;
	}
	
	private string GetParameterName(IColumn column, bool checkForKeyword)
	{
		return SharedUtils.GetParameterName(column.CodeName, checkForKeyword);
	}
	
	private string GetFullTableName(ITable table)
	{
		string fullName = "";
		if(!SharedUtils.IsMySQL(table.Database))
		{
			if(null != table.Schema && 0 < table.Schema.Length)
				fullName += GetSqlName(table.Schema) + ".";
		}
			
		fullName += GetSqlName(table.Name);
		return fullName;
	}

	private string GetSqlName(string name)
	{
		return SharedUtils.GetSqlName(name, Table.Database);
	}
	
	private string GetReaderCode(IColumn column)
	{
		string cast = "";
		string converter = "";
		string method = "GetValue";
		
		Type columnType = GetDotNetType(column);
		if(columnType == typeof(byte[]))
			cast = "(byte[])";
		else if(columnType == typeof(TimeSpan))
			cast = "(TimeSpan)";
		else if(columnType == typeof(Guid))
			method = "GetGuid";
		else if(columnType != typeof(object))
		{
			method = "GetValue";
			converter = "Convert.To" + columnType.Name + "(";
		}

		string code = cast + converter + "reader." + method + "(" + GetColumnIndexVariableName(column) + ")";
		if(0 < converter.Length)
			code += ")";
		return code;
	}
	
	private bool GenerateStoredProcedures
	{
		get { return SharedUtils.GetGenerateStoredProcedures(Table.Database); }
	}
	
	private string GetNamespace()
	{
		return SharedUtils.GetDbTierBaseNamespace(Table.Database);
	}
	
	private string GetGetAllProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetGetAllProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetGetAllProcName(table, false);
	}
	
	private string GetGetByKeyProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetGetByKeyProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetGetByKeyProcName(table, false);
	}
	
	private string GetGetByForeignKeyProcName(IRelation relation)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetGetByForeignKeyProcName(relation, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetGetByForeignKeyProcName(relation, false);
	}
	
	private string GetInsertProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetInsertProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetInsertProcName(table, false);
	}
	
	private string GetUpdateProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetUpdateProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetUpdateProcName(table, false);
	}
	
	private string GetDeleteByKeyProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetDeleteByKeyProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetDeleteByKeyProcName(table, false);
	}
	
	private string GetDeleteByForeignKeyProcName(IRelation relation)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetDeleteByForeignKeyProcName(relation, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetDeleteByForeignKeyProcName(relation, false);
	}
	
	private string GetDeleteAllProcName(ITable table)
	{
		if(SharedUtils.IsOracle(Table.Database))
			return Database_PackageDeclaration_Oracle.GetDeleteAllProcName(table, true);
		return Database_StoredProcedures_MSSQL_SybaseAse.GetDeleteAllProcName(table, false);
	}
##>