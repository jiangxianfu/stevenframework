<#--
		RapTier multi-tier Code Generator http://www.SharpPower.com
		Copyright (c) 2002-2004 SharpPower. All rights reserved.
--##>
// <fileinfo name="<#= RelativeFilePath #>">
//		<copyright>
<# SharedUtils.WriteMultiLine(Writer, SharedUtils.CopyrightText, "//			"); ##>
//		</copyright>
//		<remarks>
//			You can update this source code manually. If the file
//			already exists it will not be rewritten by the generator.
//		</remarks>
//		<generator rewritefile="<#= RewriteExistingFile #>" infourl="http://www.SharpPower.com">RapTier</generator>
// </fileinfo>

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

namespace <#= GetWinUITierNamespace() #>
{
	/// <summary>
	/// 
	/// </summary>
	public class DbNavigator : System.Windows.Forms.UserControl
	{
		private object _dataSource;
		private string _dataMember;

		private System.Windows.Forms.ToolBarButton _moveFirstButton;
		private System.Windows.Forms.ToolBarButton _movePreviousButton;
		private System.Windows.Forms.ToolBarButton _newButton;
		private System.Windows.Forms.ToolBarButton _deleteButton;
		private System.Windows.Forms.ToolBarButton _okButton;
		private System.Windows.Forms.ToolBarButton _cancelButton;
		private System.Windows.Forms.ToolBarButton _moveNextButton;
		private System.Windows.Forms.ToolBarButton _moveLastButton;
		private System.Windows.Forms.Label _recordLabel;
		private System.Windows.Forms.ImageList _navigatorImageList;
		private System.Windows.Forms.ToolBar _leftToolBar;
		private System.Windows.Forms.ToolBar _rightToolBar;
		private System.ComponentModel.IContainer components;

		/// <summary>
		/// Initializes a new instance of the <see cref="DbNavigator"/> class.
		/// </summary>
		public DbNavigator()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();

		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(DbNavigator));
			this._leftToolBar = new System.Windows.Forms.ToolBar();
			this._moveFirstButton = new System.Windows.Forms.ToolBarButton();
			this._movePreviousButton = new System.Windows.Forms.ToolBarButton();
			this._newButton = new System.Windows.Forms.ToolBarButton();
			this._deleteButton = new System.Windows.Forms.ToolBarButton();
			this._navigatorImageList = new System.Windows.Forms.ImageList(this.components);
			this._rightToolBar = new System.Windows.Forms.ToolBar();
			this._okButton = new System.Windows.Forms.ToolBarButton();
			this._cancelButton = new System.Windows.Forms.ToolBarButton();
			this._moveNextButton = new System.Windows.Forms.ToolBarButton();
			this._moveLastButton = new System.Windows.Forms.ToolBarButton();
			this._recordLabel = new System.Windows.Forms.Label();
			this.SuspendLayout();
			// 
			// _leftToolBar
			// 
			this._leftToolBar.AutoSize = false;
			this._leftToolBar.Buttons.AddRange(new System.Windows.Forms.ToolBarButton[] {
																							this._moveFirstButton,
																							this._movePreviousButton,
																							this._newButton,
																							this._deleteButton});
			this._leftToolBar.Divider = false;
			this._leftToolBar.Dock = System.Windows.Forms.DockStyle.Left;
			this._leftToolBar.ImageList = this._navigatorImageList;
			this._leftToolBar.Name = "_leftToolBar";
			this._leftToolBar.ShowToolTips = true;
			this._leftToolBar.Size = new System.Drawing.Size(96, 24);
			this._leftToolBar.TabIndex = 0;
			this._leftToolBar.Wrappable = false;
			this._leftToolBar.ButtonClick += new System.Windows.Forms.ToolBarButtonClickEventHandler(this.OnButtonClick);
			// 
			// _moveFirstButton
			// 
			this._moveFirstButton.ImageIndex = 0;
			this._moveFirstButton.ToolTipText = "Move to First";
			// 
			// _movePreviousButton
			// 
			this._movePreviousButton.ImageIndex = 1;
			this._movePreviousButton.ToolTipText = "Move to Previous";
			// 
			// _newButton
			// 
			this._newButton.ImageIndex = 2;
			this._newButton.ToolTipText = "New Record";
			// 
			// _deleteButton
			// 
			this._deleteButton.ImageIndex = 3;
			this._deleteButton.ToolTipText = "Delete Current Record";
			// 
			// _navigatorImageList
			// 
			this._navigatorImageList.ColorDepth = System.Windows.Forms.ColorDepth.Depth8Bit;
			this._navigatorImageList.ImageSize = new System.Drawing.Size(16, 16);
			this._navigatorImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("_navigatorImageList.ImageStream")));
			this._navigatorImageList.TransparentColor = System.Drawing.Color.Transparent;
			// 
			// _rightToolBar
			// 
			this._rightToolBar.AutoSize = false;
			this._rightToolBar.Buttons.AddRange(new System.Windows.Forms.ToolBarButton[] {
																							 this._okButton,
																							 this._cancelButton,
																							 this._moveNextButton,
																							 this._moveLastButton});
			this._rightToolBar.Divider = false;
			this._rightToolBar.Dock = System.Windows.Forms.DockStyle.Right;
			this._rightToolBar.ImageList = this._navigatorImageList;
			this._rightToolBar.Location = new System.Drawing.Point(216, 0);
			this._rightToolBar.Name = "_rightToolBar";
			this._rightToolBar.ShowToolTips = true;
			this._rightToolBar.Size = new System.Drawing.Size(96, 24);
			this._rightToolBar.TabIndex = 1;
			this._rightToolBar.Wrappable = false;
			this._rightToolBar.ButtonClick += new System.Windows.Forms.ToolBarButtonClickEventHandler(this.OnButtonClick);
			// 
			// _okButton
			// 
			this._okButton.ImageIndex = 4;
			this._okButton.ToolTipText = "End Current Edit";
			// 
			// _cancelButton
			// 
			this._cancelButton.ImageIndex = 5;
			this._cancelButton.ToolTipText = "Cancel Current Edit";
			// 
			// _moveNextButton
			// 
			this._moveNextButton.ImageIndex = 6;
			this._moveNextButton.ToolTipText = "Move to Next";
			// 
			// _moveLastButton
			// 
			this._moveLastButton.ImageIndex = 7;
			this._moveLastButton.ToolTipText = "Move to Last";
			// 
			// _recordLabel
			// 
			this._recordLabel.Dock = System.Windows.Forms.DockStyle.Fill;
			this._recordLabel.Location = new System.Drawing.Point(96, 0);
			this._recordLabel.Name = "_recordLabel";
			this._recordLabel.Size = new System.Drawing.Size(120, 24);
			this._recordLabel.TabIndex = 2;
			this._recordLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			// 
			// DbNavigator
			// 
			this.Controls.AddRange(new System.Windows.Forms.Control[] {
																		  this._recordLabel,
																		  this._rightToolBar,
																		  this._leftToolBar});
			this.Name = "DbNavigator";
			this.Size = new System.Drawing.Size(312, 24);
			this.ResumeLayout(false);

		}
		#endregion

		/// <summary>
		/// Gets or sets a value indicating whether the navigator 
		/// displays a ToolTip for each button.
		/// </summary>
		/// <value>true if the navigator displays a ToolTip for each button;
		/// otherwise, false. The default is true.</value>
		[DefaultValue(true), Category("Behavior"), 
			Description("Indicates whether tool tips will be shown.")]
		public bool ShowToolTips
		{
			get { return _leftToolBar.ShowToolTips; }
			set { _leftToolBar.ShowToolTips = _rightToolBar.ShowToolTips = value; }
		}

		/// <summary>
		/// Indicates whether the New, Delete, OK, and Cancel butons are visible.
		/// </summary>
		/// <value>true if the New, Delete, OK, and Cancel butons are visible;
		/// otherwise, false. The default is true.</value>
		[DefaultValue(true), Category("Behavior"), 
			Description("Indicates whether the New, Delete, OK, and Cancel butons are visible.")]
		public bool ShowEditButtons
		{
			get	{ return _newButton.Visible; }
			set
			{
				_newButton.Visible = value;
				_deleteButton.Visible = value;
				_okButton.Visible = value;
				_cancelButton.Visible = value;

				int toolBarWidth = value ? 96 : 48;
				_leftToolBar.Width = _rightToolBar.Width = toolBarWidth;
			}
		}

		/// <summary>
		/// Sets DataSource and DataMember.
		/// </summary>
		/// <param name="dataSource">The data source.</param>
		/// <param name="dataMember">The DataMember string that specifies the
		/// table to bind to within the DataSource object.</param>
		public void SetDataBinding(object dataSource, string dataMember)
		{
			BindingManagerBase bindMan = GetBindingManager();
			if(null != bindMan)
				bindMan.PositionChanged -= new EventHandler(OnBindigContextPositionChanged);

			_dataSource = dataSource;
			_dataMember = (null == dataMember) ? "" : dataMember;

			bindMan = GetBindingManager();
			if(null != bindMan)
				bindMan.PositionChanged += new EventHandler(OnBindigContextPositionChanged);
			UpdateControls();
		}

		/// <summary>
		/// Returns the current binding manager.
		/// </summary>
		/// <returns>A reference to the binding manager.</returns>
		private BindingManagerBase GetBindingManager()
		{
			if(null != _dataSource && null != BindingContext)
				return BindingContext[_dataSource, _dataMember];
			return null;
		}

		private void OnBindigContextPositionChanged(object sender, System.EventArgs e)
		{
			UpdateControls();
		}

		private void OnButtonClick(object sender, System.Windows.Forms.ToolBarButtonClickEventArgs e)
		{
			BindingManagerBase bindMan = GetBindingManager();

			if(_cancelButton == e.Button)
				bindMan.CancelCurrentEdit();
			else if(_deleteButton == e.Button)
				bindMan.RemoveAt(bindMan.Position);
			else
			{
				try
				{
					Focus();
					bindMan.EndCurrentEdit();
				}
				catch(Exception ex)
				{
					string msg = ex.Message + " Do you want to correct value?";
					if(DialogResult.Yes != MessageBox.Show(msg, "Error when commiting the row to the original data store.", MessageBoxButtons.YesNo))
					{
						bindMan.CancelCurrentEdit();
						if(_moveFirstButton == e.Button)
							bindMan.Position = 0;
					}
					return;
				}

				if(_newButton == e.Button)
					bindMan.AddNew();
				else if(_moveFirstButton == e.Button)
					bindMan.Position = 0;
				else if(_movePreviousButton == e.Button)
					bindMan.Position--;
				else if(_moveNextButton == e.Button)
					bindMan.Position++;
				else if(_moveLastButton == e.Button)
					bindMan.Position = bindMan.Count - 1;
			}
			UpdateControls();
		}

		private void UpdateControls()
		{
			BindingManagerBase bindMan = GetBindingManager();

			if(null == bindMan || 0 == bindMan.Count)
			{
				_moveFirstButton.Enabled = _movePreviousButton.Enabled =
					_moveLastButton.Enabled = _moveNextButton.Enabled = 
					_deleteButton.Enabled = 
					_cancelButton.Enabled = _okButton.Enabled = false;
				_newButton.Enabled = bindMan != null;
				_recordLabel.Text = "";
			}
			else
			{
				DataRowView row = bindMan.Current as DataRowView;
				if(null != row)
					_newButton.Enabled = !row.IsNew;
				else
				{
					_newButton.Enabled = true;
					_cancelButton.Enabled = _okButton.Enabled = true;
				}

				_moveFirstButton.Enabled = _movePreviousButton.Enabled = 0 < bindMan.Position;
				_moveNextButton.Enabled = _moveLastButton.Enabled = bindMan.Position < bindMan.Count - 1;
				_deleteButton.Enabled = true;
				_recordLabel.Text = string.Format("{0} of {1}", bindMan.Position + 1, bindMan.Count);
			}
		}
	}
}
<#--

The code below imports namespaces and declares methods and properties that are 
used by the template only. This code will not be copied into the output file.

--##>
<#@ Imports
using System;
using System.Text;
using SharpPower.DbDom;
##>
<#@ InstanceMembers
	private IDatabase Database
	{
		get { return (IDatabase)Environment["Database"]; }
	}

	public override bool RewriteExistingFile
	{
		get { return false; }
	}

	public override string RelativeFilePath
	{
		get { return "DbNavigator.cs"; }
	}

	private string GetWinUITierNamespace()
	{
		return SharedUtils.GetWinUITierNamespace(Database);
	}
##>